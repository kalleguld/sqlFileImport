<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

<# //Ignore the next line, it is not true for this .tt file! #>
//This file is is autogenerated. <# //No it's not! #> Any changes will be overwritten

//To add a string to this class, add an .sql file to the folder <#=this.Host.ResolvePath("Sql")#> and run the T4 template transform

namespace qlt2
{
<#= ImportFiles(this.Host.ResolvePath("Sql"), "\t") #>
}



<#+
public static string ImportFiles(string path, string indent)
{
    StringBuilder sb = new StringBuilder();

    sb.AppendLine(indent + "internal static class " + Path.GetFileName(path));
    sb.AppendLine(indent + "{");

    foreach (var filePath in Directory.EnumerateFiles(path))
    {
        var filename = Path.GetFileNameWithoutExtension(filePath);

        var rawstring = File.ReadAllText(filePath, Encoding.UTF8);
        var quotedString = ToLiteral(rawstring);
        sb.AppendLine($"{indent}\tpublic const string {filename} = {quotedString};");

    }

    foreach (var subDir in Directory.EnumerateDirectories(path))
    {
        var subDirString = ImportFiles(subDir, indent + "\t");
        sb.AppendLine(subDirString);
    }
            
    sb.AppendLine(indent + "}");
    return sb.ToString();
}
        

private static string ToLiteral(string input)
{
    StringBuilder literal = new StringBuilder(input.Length + 3);
    literal.Append("@\"");
    foreach (var c in input)
    {
        switch (c)
        {
            case '\"': literal.Append("\\\""); break;
            case '\\': literal.Append(@"\\"); break;
            case '\0': literal.Append(@"\0"); break;
            case '\a': literal.Append(@"\a"); break;
            case '\b': literal.Append(@"\b"); break;
            case '\f': literal.Append(@"\f"); break;
            case '\v': literal.Append(@"\v"); break;
			case '\n': literal.Append("\n"); break;
			case '\r': literal.Append("\r"); break;
			case '\t': literal.Append("\t"); break;
            default:
                // ASCII printable character
                if (c >= 0x20 && c <= 0x7e)
                {
                    literal.Append(c);
                    // As UTF16 escaped character
                }
                else
                {
                    literal.Append(@"\u");
                    literal.Append(((int)c).ToString("x4"));
                }
                break;
        }
    }
    literal.Append("\"");
    return literal.ToString();
}
#>